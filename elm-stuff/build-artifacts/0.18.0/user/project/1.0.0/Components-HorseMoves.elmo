var _user$project$Components_HorseMoves$insideChessBoard = function (_p0) {
	var _p1 = _p0;
	var _p3 = _p1._0;
	var _p2 = _p1._1;
	return (_elm_lang$core$Native_Utils.cmp(_p3, 0) > -1) && ((_elm_lang$core$Native_Utils.cmp(_p3, _user$project$Components_ChessBoard$chessBoardSize) < 0) && ((_elm_lang$core$Native_Utils.cmp(_p2, 0) > -1) && (_elm_lang$core$Native_Utils.cmp(_p2, _user$project$Components_ChessBoard$chessBoardSize) < 0)));
};
var _user$project$Components_HorseMoves$possibleHorseMoves = function (_p4) {
	var _p5 = _p4;
	var _p7 = _p5._0;
	var _p6 = _p5._1;
	return A2(
		_elm_lang$core$List$filter,
		_user$project$Components_HorseMoves$insideChessBoard,
		{
			ctor: '::',
			_0: {ctor: '_Tuple2', _0: _p7 + 2, _1: _p6 + 1},
			_1: {
				ctor: '::',
				_0: {ctor: '_Tuple2', _0: _p7 + 2, _1: _p6 - 1},
				_1: {
					ctor: '::',
					_0: {ctor: '_Tuple2', _0: _p7 - 2, _1: _p6 + 1},
					_1: {
						ctor: '::',
						_0: {ctor: '_Tuple2', _0: _p7 - 2, _1: _p6 - 1},
						_1: {
							ctor: '::',
							_0: {ctor: '_Tuple2', _0: _p7 + 1, _1: _p6 + 2},
							_1: {
								ctor: '::',
								_0: {ctor: '_Tuple2', _0: _p7 - 1, _1: _p6 + 2},
								_1: {
									ctor: '::',
									_0: {ctor: '_Tuple2', _0: _p7 + 1, _1: _p6 - 2},
									_1: {
										ctor: '::',
										_0: {ctor: '_Tuple2', _0: _p7 - 1, _1: _p6 - 2},
										_1: {ctor: '[]'}
									}
								}
							}
						}
					}
				}
			}
		});
};
var _user$project$Components_HorseMoves$recursiveMovesToTarget = F3(
	function (visitedList, currentLocations, targetLocation) {
		var moves = function () {
			if (A2(_elm_lang$core$List$member, targetLocation, currentLocations)) {
				return {
					ctor: '_Tuple3',
					_0: _elm_lang$core$List$length(visitedList),
					_1: visitedList,
					_2: currentLocations
				};
			} else {
				var newVisitedList = A2(
					_elm_lang$core$List$append,
					visitedList,
					{
						ctor: '::',
						_0: currentLocations,
						_1: {ctor: '[]'}
					});
				var newLocations = A2(
					_elm_lang$core$List$filter,
					function (loc) {
						return !A2(
							_elm_lang$core$List$member,
							loc,
							_elm_lang$core$List$concat(newVisitedList));
					},
					A3(
						_elm_lang$core$List$foldl,
						F2(
							function (location, cumList) {
								return (!A2(_elm_lang$core$List$member, location, cumList)) ? {ctor: '::', _0: location, _1: cumList} : cumList;
							}),
						{ctor: '[]'},
						A2(_elm_lang$core$List$concatMap, _user$project$Components_HorseMoves$possibleHorseMoves, currentLocations)));
				return A3(_user$project$Components_HorseMoves$recursiveMovesToTarget, newVisitedList, newLocations, targetLocation);
			}
		}();
		return moves;
	});
var _user$project$Components_HorseMoves$horseMovesToTarget = F2(
	function (horseLocation, targetLocation) {
		return A3(
			_user$project$Components_HorseMoves$recursiveMovesToTarget,
			{
				ctor: '::',
				_0: {
					ctor: '::',
					_0: horseLocation,
					_1: {ctor: '[]'}
				},
				_1: {ctor: '[]'}
			},
			_user$project$Components_HorseMoves$possibleHorseMoves(horseLocation),
			targetLocation);
	});
var _user$project$Components_HorseMoves$renderHorseMoves = F2(
	function (horseLocation, targetLocation) {
		var _p8 = A2(_user$project$Components_HorseMoves$horseMovesToTarget, horseLocation, targetLocation);
		var moves = _p8._0;
		var movesList = _p8._1;
		var lastLocations = _p8._2;
		var visitedLocations = _elm_lang$core$List$length(
			_elm_lang$core$List$concat(
				{ctor: '::', _0: lastLocations, _1: movesList}));
		return A2(
			_elm_lang$html$Html$div,
			{
				ctor: '::',
				_0: _elm_lang$html$Html_Attributes$class('horse-moves'),
				_1: {ctor: '[]'}
			},
			{
				ctor: '::',
				_0: A2(
					_elm_lang$html$Html$div,
					{ctor: '[]'},
					{
						ctor: '::',
						_0: _elm_lang$html$Html$text(
							_elm_lang$core$Basics$toString(moves)),
						_1: {ctor: '[]'}
					}),
				_1: {
					ctor: '::',
					_0: A2(
						_elm_lang$html$Html$div,
						{ctor: '[]'},
						A2(
							_elm_lang$core$List$map,
							function (movesListStep) {
								return A2(
									_elm_lang$html$Html$div,
									{ctor: '[]'},
									{
										ctor: '::',
										_0: _elm_lang$html$Html$text(
											_elm_lang$core$Basics$toString(movesListStep)),
										_1: {ctor: '[]'}
									});
							},
							movesList)),
					_1: {
						ctor: '::',
						_0: A2(
							_elm_lang$html$Html$div,
							{ctor: '[]'},
							{
								ctor: '::',
								_0: _elm_lang$html$Html$text(
									_elm_lang$core$Basics$toString(lastLocations)),
								_1: {ctor: '[]'}
							}),
						_1: {
							ctor: '::',
							_0: A2(
								_elm_lang$html$Html$div,
								{ctor: '[]'},
								{
									ctor: '::',
									_0: _elm_lang$html$Html$text(
										_elm_lang$core$Basics$toString(visitedLocations)),
									_1: {ctor: '[]'}
								}),
							_1: {ctor: '[]'}
						}
					}
				}
			});
	});

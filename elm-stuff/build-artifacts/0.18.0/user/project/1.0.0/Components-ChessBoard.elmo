var _user$project$Components_ChessBoard$renderChessboardRow = F2(
	function (chessBoardRow, rowIndex) {
		return A2(
			_elm_lang$core$List$indexedMap,
			F2(
				function (index, piece) {
					var _p0 = piece;
					switch (_p0.ctor) {
						case 'Empty':
							return A2(
								_elm_lang$html$Html$div,
								{
									ctor: '::',
									_0: _elm_lang$html$Html_Attributes$class('chess-board__cell'),
									_1: {
										ctor: '::',
										_0: _elm_lang$html$Html_Events$onClick(
											_user$project$Types_Messages$BoardClick(
												{ctor: '_Tuple2', _0: rowIndex, _1: index})),
										_1: {ctor: '[]'}
									}
								},
								{
									ctor: '::',
									_0: _elm_lang$html$Html$text(''),
									_1: {ctor: '[]'}
								});
						case 'Knight':
							return A2(
								_elm_lang$html$Html$div,
								{
									ctor: '::',
									_0: _elm_lang$html$Html_Attributes$class('chess-board__cell--knight'),
									_1: {ctor: '[]'}
								},
								{
									ctor: '::',
									_0: _elm_lang$html$Html$text(''),
									_1: {ctor: '[]'}
								});
						default:
							return A2(
								_elm_lang$html$Html$div,
								{
									ctor: '::',
									_0: _elm_lang$html$Html_Attributes$class('chess-board__cell--target'),
									_1: {ctor: '[]'}
								},
								{
									ctor: '::',
									_0: _elm_lang$html$Html$text(''),
									_1: {ctor: '[]'}
								});
					}
				}),
			chessBoardRow);
	});
var _user$project$Components_ChessBoard$chessBoardSize = 8;
var _user$project$Components_ChessBoard$Empty = {ctor: 'Empty'};
var _user$project$Components_ChessBoard$Target = {ctor: 'Target'};
var _user$project$Components_ChessBoard$Knight = {ctor: 'Knight'};
var _user$project$Components_ChessBoard$renderChessboard = F2(
	function (knightLocation, targetLocation) {
		var chessBoard = A2(
			_elm_lang$core$List$indexedMap,
			F2(
				function (rowIndex, chessRow) {
					return A2(
						_elm_lang$core$List$indexedMap,
						F2(
							function (colIndex, piece) {
								return _elm_lang$core$Native_Utils.eq(
									{ctor: '_Tuple2', _0: rowIndex, _1: colIndex},
									knightLocation) ? _user$project$Components_ChessBoard$Knight : (_elm_lang$core$Native_Utils.eq(
									{ctor: '_Tuple2', _0: rowIndex, _1: colIndex},
									targetLocation) ? _user$project$Components_ChessBoard$Target : piece);
							}),
						chessRow);
				}),
			A2(
				_elm_lang$core$List$repeat,
				_user$project$Components_ChessBoard$chessBoardSize,
				A2(_elm_lang$core$List$repeat, _user$project$Components_ChessBoard$chessBoardSize, _user$project$Components_ChessBoard$Empty)));
		return A2(
			_elm_lang$html$Html$div,
			{
				ctor: '::',
				_0: _elm_lang$html$Html_Attributes$class('chess-board'),
				_1: {ctor: '[]'}
			},
			A2(
				_elm_lang$core$List$indexedMap,
				F2(
					function (index, chessBoardRow) {
						return A2(
							_elm_lang$html$Html$div,
							{
								ctor: '::',
								_0: _elm_lang$html$Html_Attributes$class('chess-board__row'),
								_1: {ctor: '[]'}
							},
							A2(_user$project$Components_ChessBoard$renderChessboardRow, chessBoardRow, index));
					}),
				chessBoard));
	});

var _user$project$Components_KnightMoves$addDiffToLocation = F2(
	function (_p1, _p0) {
		var _p2 = _p1;
		var _p3 = _p0;
		return {ctor: '_Tuple2', _0: _p2._0 + _p3._0, _1: _p2._1 + _p3._1};
	});
var _user$project$Components_KnightMoves$insideChessBoard = function (_p4) {
	var _p5 = _p4;
	var _p7 = _p5._0;
	var _p6 = _p5._1;
	return (_elm_lang$core$Native_Utils.cmp(_p7, 0) > -1) && ((_elm_lang$core$Native_Utils.cmp(_p7, _user$project$Components_ChessBoard$chessBoardSize) < 0) && ((_elm_lang$core$Native_Utils.cmp(_p6, 0) > -1) && (_elm_lang$core$Native_Utils.cmp(_p6, _user$project$Components_ChessBoard$chessBoardSize) < 0)));
};
var _user$project$Components_KnightMoves$possibleKnightMoves = function (location) {
	var movesBase = {
		ctor: '::',
		_0: 2,
		_1: {
			ctor: '::',
			_0: 2,
			_1: {
				ctor: '::',
				_0: -2,
				_1: {
					ctor: '::',
					_0: -2,
					_1: {
						ctor: '::',
						_0: 1,
						_1: {
							ctor: '::',
							_0: -1,
							_1: {
								ctor: '::',
								_0: 1,
								_1: {
									ctor: '::',
									_0: -1,
									_1: {ctor: '[]'}
								}
							}
						}
					}
				}
			}
		}
	};
	return A2(
		_elm_lang$core$List$filter,
		_user$project$Components_KnightMoves$insideChessBoard,
		A2(
			_elm_lang$core$List$map,
			_user$project$Components_KnightMoves$addDiffToLocation(location),
			A3(
				_elm_lang$core$List$map2,
				F2(
					function (v0, v1) {
						return {ctor: '_Tuple2', _0: v0, _1: v1};
					}),
				movesBase,
				_elm_lang$core$List$reverse(movesBase))));
};
var _user$project$Components_KnightMoves$recursiveMovesToTarget = F3(
	function (visitedList, currentLocations, targetLocation) {
		recursiveMovesToTarget:
		while (true) {
			if (_elm_lang$core$Native_Utils.eq(
				_elm_lang$core$List$length(currentLocations),
				0) || A2(_elm_lang$core$List$member, targetLocation, currentLocations)) {
				return {
					ctor: '_Tuple3',
					_0: _elm_lang$core$List$length(visitedList),
					_1: visitedList,
					_2: currentLocations
				};
			} else {
				var newVisitedList = A2(
					_elm_lang$core$List$append,
					visitedList,
					{
						ctor: '::',
						_0: currentLocations,
						_1: {ctor: '[]'}
					});
				var newLocations = _elm_lang$core$Set$toList(
					A2(
						_elm_lang$core$Set$filter,
						function (loc) {
							return !A2(
								_elm_lang$core$List$member,
								loc,
								_elm_lang$core$List$concat(newVisitedList));
						},
						_elm_lang$core$Set$fromList(
							A2(_elm_lang$core$List$concatMap, _user$project$Components_KnightMoves$possibleKnightMoves, currentLocations))));
				var _v3 = newVisitedList,
					_v4 = newLocations,
					_v5 = targetLocation;
				visitedList = _v3;
				currentLocations = _v4;
				targetLocation = _v5;
				continue recursiveMovesToTarget;
			}
		}
	});
var _user$project$Components_KnightMoves$knightMovesToTarget = F2(
	function (knightLocation, targetLocation) {
		return ((!_user$project$Components_KnightMoves$insideChessBoard(knightLocation)) || (!_user$project$Components_KnightMoves$insideChessBoard(targetLocation))) ? {
			ctor: '_Tuple3',
			_0: 0,
			_1: {
				ctor: '::',
				_0: {ctor: '[]'},
				_1: {ctor: '[]'}
			},
			_2: {ctor: '[]'}
		} : A3(
			_user$project$Components_KnightMoves$recursiveMovesToTarget,
			{
				ctor: '::',
				_0: {
					ctor: '::',
					_0: knightLocation,
					_1: {ctor: '[]'}
				},
				_1: {ctor: '[]'}
			},
			_user$project$Components_KnightMoves$possibleKnightMoves(knightLocation),
			targetLocation);
	});
var _user$project$Components_KnightMoves$renderKnightMoves = F2(
	function (knightLocation, targetLocation) {
		var _p8 = A2(_user$project$Components_KnightMoves$knightMovesToTarget, knightLocation, targetLocation);
		var moves = _p8._0;
		var movesList = _p8._1;
		var lastLocations = _p8._2;
		var visitedLocations = _elm_lang$core$List$length(
			_elm_lang$core$List$concat(
				{ctor: '::', _0: lastLocations, _1: movesList}));
		return A2(
			_elm_lang$html$Html$div,
			{
				ctor: '::',
				_0: _elm_lang$html$Html_Attributes$class('knight-moves'),
				_1: {ctor: '[]'}
			},
			{
				ctor: '::',
				_0: A2(
					_elm_lang$html$Html$div,
					{
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$class('total-moves'),
						_1: {ctor: '[]'}
					},
					{
						ctor: '::',
						_0: _elm_lang$html$Html$text(
							_elm_lang$core$Basics$toString(moves)),
						_1: {
							ctor: '::',
							_0: _elm_lang$html$Html$text(' moves to target'),
							_1: {ctor: '[]'}
						}
					}),
				_1: {
					ctor: '::',
					_0: A2(
						_elm_lang$html$Html$div,
						{ctor: '[]'},
						A2(
							_elm_lang$core$List$map,
							function (movesListStep) {
								return A2(
									_elm_lang$html$Html$div,
									{ctor: '[]'},
									{
										ctor: '::',
										_0: _elm_lang$html$Html$text(
											_elm_lang$core$Basics$toString(movesListStep)),
										_1: {ctor: '[]'}
									});
							},
							movesList)),
					_1: {
						ctor: '::',
						_0: A2(
							_elm_lang$html$Html$div,
							{ctor: '[]'},
							{
								ctor: '::',
								_0: _elm_lang$html$Html$text(
									_elm_lang$core$Basics$toString(lastLocations)),
								_1: {ctor: '[]'}
							}),
						_1: {
							ctor: '::',
							_0: A2(
								_elm_lang$html$Html$div,
								{ctor: '[]'},
								{
									ctor: '::',
									_0: _elm_lang$html$Html$text(
										_elm_lang$core$Basics$toString(visitedLocations)),
									_1: {ctor: '[]'}
								}),
							_1: {ctor: '[]'}
						}
					}
				}
			});
	});
